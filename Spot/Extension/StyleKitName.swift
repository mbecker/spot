//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 2/23/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfChevronRight: UIImage?
        static var chevronRightTargets: [AnyObject]?
        static var imageOfCancel: UIImage?
        static var cancelTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawChevronRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 8, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 8, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 8, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// up-arrow.svg Group
        context.saveGState()
        context.translateBy(x: 166, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.77, y: 164.67))
        bezierPath.addLine(to: CGPoint(x: 8.33, y: 158.14))
        bezierPath.addCurve(to: CGPoint(x: 7.96, y: 158), controlPoint1: CGPoint(x: 8.22, y: 158.05), controlPoint2: CGPoint(x: 8.1, y: 158))
        bezierPath.addCurve(to: CGPoint(x: 7.6, y: 158.14), controlPoint1: CGPoint(x: 7.83, y: 158), controlPoint2: CGPoint(x: 7.7, y: 158.05))
        bezierPath.addLine(to: CGPoint(x: 0.16, y: 164.67))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 165), controlPoint1: CGPoint(x: 0.05, y: 164.77), controlPoint2: CGPoint(x: 0, y: 164.88))
        bezierPath.addCurve(to: CGPoint(x: 0.16, y: 165.32), controlPoint1: CGPoint(x: 0, y: 165.12), controlPoint2: CGPoint(x: 0.05, y: 165.23))
        bezierPath.addLine(to: CGPoint(x: 0.96, y: 166.02))
        bezierPath.addCurve(to: CGPoint(x: 1.32, y: 166.16), controlPoint1: CGPoint(x: 1.06, y: 166.11), controlPoint2: CGPoint(x: 1.19, y: 166.16))
        bezierPath.addCurve(to: CGPoint(x: 1.69, y: 166.02), controlPoint1: CGPoint(x: 1.46, y: 166.16), controlPoint2: CGPoint(x: 1.59, y: 166.11))
        bezierPath.addLine(to: CGPoint(x: 7.96, y: 160.51))
        bezierPath.addLine(to: CGPoint(x: 14.24, y: 166.02))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 166.16), controlPoint1: CGPoint(x: 14.34, y: 166.11), controlPoint2: CGPoint(x: 14.47, y: 166.16))
        bezierPath.addCurve(to: CGPoint(x: 14.97, y: 166.02), controlPoint1: CGPoint(x: 14.74, y: 166.16), controlPoint2: CGPoint(x: 14.86, y: 166.11))
        bezierPath.addLine(to: CGPoint(x: 15.77, y: 165.32))
        bezierPath.addCurve(to: CGPoint(x: 15.93, y: 165), controlPoint1: CGPoint(x: 15.88, y: 165.23), controlPoint2: CGPoint(x: 15.93, y: 165.12))
        bezierPath.addCurve(to: CGPoint(x: 15.77, y: 164.67), controlPoint1: CGPoint(x: 15.93, y: 164.88), controlPoint2: CGPoint(x: 15.88, y: 164.77))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.01, y: 7.22))
        bezierPath.addCurve(to: CGPoint(x: 9.01, y: 6.78), controlPoint1: CGPoint(x: 8.89, y: 7.1), controlPoint2: CGPoint(x: 8.89, y: 6.9))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 1.98))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 1.53), controlPoint1: CGPoint(x: 13.94, y: 1.85), controlPoint2: CGPoint(x: 14, y: 1.66))
        bezierPath.addCurve(to: CGPoint(x: 13.81, y: 1.09), controlPoint1: CGPoint(x: 14, y: 1.41), controlPoint2: CGPoint(x: 13.94, y: 1.21))
        bezierPath.addLine(to: CGPoint(x: 12.91, y: 0.19))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 0), controlPoint1: CGPoint(x: 12.79, y: 0.06), controlPoint2: CGPoint(x: 12.59, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 12.02, y: 0.19), controlPoint1: CGPoint(x: 12.27, y: 0), controlPoint2: CGPoint(x: 12.15, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 7.22, y: 4.99))
        bezierPath.addCurve(to: CGPoint(x: 6.78, y: 4.99), controlPoint1: CGPoint(x: 7.1, y: 5.11), controlPoint2: CGPoint(x: 6.9, y: 5.11))
        bezierPath.addLine(to: CGPoint(x: 1.98, y: 0.19))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 0), controlPoint1: CGPoint(x: 1.85, y: 0.06), controlPoint2: CGPoint(x: 1.66, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 1.09, y: 0.19), controlPoint1: CGPoint(x: 1.41, y: 0), controlPoint2: CGPoint(x: 1.21, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 0.19, y: 1.09))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 1.53), controlPoint1: CGPoint(x: 0.06, y: 1.21), controlPoint2: CGPoint(x: 0, y: 1.41))
        bezierPath.addCurve(to: CGPoint(x: 0.19, y: 1.98), controlPoint1: CGPoint(x: 0, y: 1.66), controlPoint2: CGPoint(x: 0.06, y: 1.85))
        bezierPath.addLine(to: CGPoint(x: 4.99, y: 6.78))
        bezierPath.addCurve(to: CGPoint(x: 4.99, y: 7.22), controlPoint1: CGPoint(x: 5.11, y: 6.9), controlPoint2: CGPoint(x: 5.11, y: 7.1))
        bezierPath.addLine(to: CGPoint(x: 0.19, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 12.47), controlPoint1: CGPoint(x: 0.06, y: 12.15), controlPoint2: CGPoint(x: 0, y: 12.34))
        bezierPath.addCurve(to: CGPoint(x: 0.19, y: 12.91), controlPoint1: CGPoint(x: 0, y: 12.59), controlPoint2: CGPoint(x: 0.06, y: 12.79))
        bezierPath.addLine(to: CGPoint(x: 1.09, y: 13.81))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 14), controlPoint1: CGPoint(x: 1.21, y: 13.94), controlPoint2: CGPoint(x: 1.41, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 1.98, y: 13.81), controlPoint1: CGPoint(x: 1.66, y: 14), controlPoint2: CGPoint(x: 1.85, y: 13.94))
        bezierPath.addLine(to: CGPoint(x: 6.78, y: 9.01))
        bezierPath.addCurve(to: CGPoint(x: 7.22, y: 9.01), controlPoint1: CGPoint(x: 6.9, y: 8.89), controlPoint2: CGPoint(x: 7.1, y: 8.89))
        bezierPath.addLine(to: CGPoint(x: 12.02, y: 13.81))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 14), controlPoint1: CGPoint(x: 12.15, y: 13.94), controlPoint2: CGPoint(x: 12.34, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 12.91, y: 13.81), controlPoint1: CGPoint(x: 12.59, y: 14), controlPoint2: CGPoint(x: 12.79, y: 13.94))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 12.91))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 12.47), controlPoint1: CGPoint(x: 13.94, y: 12.79), controlPoint2: CGPoint(x: 14, y: 12.59))
        bezierPath.addCurve(to: CGPoint(x: 13.81, y: 12.02), controlPoint1: CGPoint(x: 14, y: 12.34), controlPoint2: CGPoint(x: 13.94, y: 12.15))
        bezierPath.addLine(to: CGPoint(x: 9.01, y: 7.22))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfChevronRight: UIImage {
        if Cache.imageOfChevronRight != nil {
            return Cache.imageOfChevronRight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 16), false, 0)
            StyleKitName.drawChevronRight()

        Cache.imageOfChevronRight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfChevronRight!
    }

    public dynamic class var imageOfCancel: UIImage {
        if Cache.imageOfCancel != nil {
            return Cache.imageOfCancel!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 14), false, 0)
            StyleKitName.drawCancel()

        Cache.imageOfCancel = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancel!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var chevronRightTargets: [AnyObject]! {
        get { return Cache.chevronRightTargets }
        set {
            Cache.chevronRightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfChevronRight)
            }
        }
    }

    @IBOutlet dynamic var cancelTargets: [AnyObject]! {
        get { return Cache.cancelTargets }
        set {
            Cache.cancelTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfCancel)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
