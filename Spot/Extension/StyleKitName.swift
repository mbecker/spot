//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 2/27/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfChevronRight: UIImage?
        static var chevronRightTargets: [AnyObject]?
        static var imageOfCancel: UIImage?
        static var cancelTargets: [AnyObject]?
        static var imageOfFlash: UIImage?
        static var flashTargets: [AnyObject]?
        static var imageOfBolt: UIImage?
        static var boltTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawChevronRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 8, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 8, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 8, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// up-arrow.svg Group
        context.saveGState()
        context.translateBy(x: 166, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.77, y: 164.67))
        bezierPath.addLine(to: CGPoint(x: 8.33, y: 158.14))
        bezierPath.addCurve(to: CGPoint(x: 7.96, y: 158), controlPoint1: CGPoint(x: 8.22, y: 158.05), controlPoint2: CGPoint(x: 8.1, y: 158))
        bezierPath.addCurve(to: CGPoint(x: 7.6, y: 158.14), controlPoint1: CGPoint(x: 7.83, y: 158), controlPoint2: CGPoint(x: 7.7, y: 158.05))
        bezierPath.addLine(to: CGPoint(x: 0.16, y: 164.67))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 165), controlPoint1: CGPoint(x: 0.05, y: 164.77), controlPoint2: CGPoint(x: 0, y: 164.88))
        bezierPath.addCurve(to: CGPoint(x: 0.16, y: 165.32), controlPoint1: CGPoint(x: 0, y: 165.12), controlPoint2: CGPoint(x: 0.05, y: 165.23))
        bezierPath.addLine(to: CGPoint(x: 0.96, y: 166.02))
        bezierPath.addCurve(to: CGPoint(x: 1.32, y: 166.16), controlPoint1: CGPoint(x: 1.06, y: 166.11), controlPoint2: CGPoint(x: 1.19, y: 166.16))
        bezierPath.addCurve(to: CGPoint(x: 1.69, y: 166.02), controlPoint1: CGPoint(x: 1.46, y: 166.16), controlPoint2: CGPoint(x: 1.59, y: 166.11))
        bezierPath.addLine(to: CGPoint(x: 7.96, y: 160.51))
        bezierPath.addLine(to: CGPoint(x: 14.24, y: 166.02))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 166.16), controlPoint1: CGPoint(x: 14.34, y: 166.11), controlPoint2: CGPoint(x: 14.47, y: 166.16))
        bezierPath.addCurve(to: CGPoint(x: 14.97, y: 166.02), controlPoint1: CGPoint(x: 14.74, y: 166.16), controlPoint2: CGPoint(x: 14.86, y: 166.11))
        bezierPath.addLine(to: CGPoint(x: 15.77, y: 165.32))
        bezierPath.addCurve(to: CGPoint(x: 15.93, y: 165), controlPoint1: CGPoint(x: 15.88, y: 165.23), controlPoint2: CGPoint(x: 15.93, y: 165.12))
        bezierPath.addCurve(to: CGPoint(x: 15.77, y: 164.67), controlPoint1: CGPoint(x: 15.93, y: 164.88), controlPoint2: CGPoint(x: 15.88, y: 164.77))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.01, y: 7.22))
        bezierPath.addCurve(to: CGPoint(x: 9.01, y: 6.78), controlPoint1: CGPoint(x: 8.89, y: 7.1), controlPoint2: CGPoint(x: 8.89, y: 6.9))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 1.98))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 1.53), controlPoint1: CGPoint(x: 13.94, y: 1.85), controlPoint2: CGPoint(x: 14, y: 1.66))
        bezierPath.addCurve(to: CGPoint(x: 13.81, y: 1.09), controlPoint1: CGPoint(x: 14, y: 1.41), controlPoint2: CGPoint(x: 13.94, y: 1.21))
        bezierPath.addLine(to: CGPoint(x: 12.91, y: 0.19))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 0), controlPoint1: CGPoint(x: 12.79, y: 0.06), controlPoint2: CGPoint(x: 12.59, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 12.02, y: 0.19), controlPoint1: CGPoint(x: 12.27, y: 0), controlPoint2: CGPoint(x: 12.15, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 7.22, y: 4.99))
        bezierPath.addCurve(to: CGPoint(x: 6.78, y: 4.99), controlPoint1: CGPoint(x: 7.1, y: 5.11), controlPoint2: CGPoint(x: 6.9, y: 5.11))
        bezierPath.addLine(to: CGPoint(x: 1.98, y: 0.19))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 0), controlPoint1: CGPoint(x: 1.85, y: 0.06), controlPoint2: CGPoint(x: 1.66, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 1.09, y: 0.19), controlPoint1: CGPoint(x: 1.41, y: 0), controlPoint2: CGPoint(x: 1.21, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 0.19, y: 1.09))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 1.53), controlPoint1: CGPoint(x: 0.06, y: 1.21), controlPoint2: CGPoint(x: 0, y: 1.41))
        bezierPath.addCurve(to: CGPoint(x: 0.19, y: 1.98), controlPoint1: CGPoint(x: 0, y: 1.66), controlPoint2: CGPoint(x: 0.06, y: 1.85))
        bezierPath.addLine(to: CGPoint(x: 4.99, y: 6.78))
        bezierPath.addCurve(to: CGPoint(x: 4.99, y: 7.22), controlPoint1: CGPoint(x: 5.11, y: 6.9), controlPoint2: CGPoint(x: 5.11, y: 7.1))
        bezierPath.addLine(to: CGPoint(x: 0.19, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 12.47), controlPoint1: CGPoint(x: 0.06, y: 12.15), controlPoint2: CGPoint(x: 0, y: 12.34))
        bezierPath.addCurve(to: CGPoint(x: 0.19, y: 12.91), controlPoint1: CGPoint(x: 0, y: 12.59), controlPoint2: CGPoint(x: 0.06, y: 12.79))
        bezierPath.addLine(to: CGPoint(x: 1.09, y: 13.81))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 14), controlPoint1: CGPoint(x: 1.21, y: 13.94), controlPoint2: CGPoint(x: 1.41, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 1.98, y: 13.81), controlPoint1: CGPoint(x: 1.66, y: 14), controlPoint2: CGPoint(x: 1.85, y: 13.94))
        bezierPath.addLine(to: CGPoint(x: 6.78, y: 9.01))
        bezierPath.addCurve(to: CGPoint(x: 7.22, y: 9.01), controlPoint1: CGPoint(x: 6.9, y: 8.89), controlPoint2: CGPoint(x: 7.1, y: 8.89))
        bezierPath.addLine(to: CGPoint(x: 12.02, y: 13.81))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 14), controlPoint1: CGPoint(x: 12.15, y: 13.94), controlPoint2: CGPoint(x: 12.34, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 12.91, y: 13.81), controlPoint1: CGPoint(x: 12.59, y: 14), controlPoint2: CGPoint(x: 12.79, y: 13.94))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 12.91))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 12.47), controlPoint1: CGPoint(x: 13.94, y: 12.79), controlPoint2: CGPoint(x: 14, y: 12.59))
        bezierPath.addCurve(to: CGPoint(x: 13.81, y: 12.02), controlPoint1: CGPoint(x: 14, y: 12.34), controlPoint2: CGPoint(x: 13.94, y: 12.15))
        bezierPath.addLine(to: CGPoint(x: 9.01, y: 7.22))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawFlash(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// flash.svg Group
        //// Group 2
        //// Group 3
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.26, y: 10.99))
        bezierPath.addCurve(to: CGPoint(x: 17.77, y: 10.67), controlPoint1: CGPoint(x: 18.15, y: 10.77), controlPoint2: CGPoint(x: 17.99, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 11.31, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 17.71, y: 0.8))
        bezierPath.addCurve(to: CGPoint(x: 17.71, y: 0.27), controlPoint1: CGPoint(x: 17.82, y: 0.64), controlPoint2: CGPoint(x: 17.82, y: 0.43))
        bezierPath.addCurve(to: CGPoint(x: 17.22, y: 0), controlPoint1: CGPoint(x: 17.6, y: 0.11), controlPoint2: CGPoint(x: 17.44, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8.46, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 7.97, y: 0.27), controlPoint1: CGPoint(x: 8.25, y: 0), controlPoint2: CGPoint(x: 8.08, y: 0.11))
        bezierPath.addLine(to: CGPoint(x: -0.24, y: 16.27))
        bezierPath.addCurve(to: CGPoint(x: -0.24, y: 16.8), controlPoint1: CGPoint(x: -0.35, y: 16.43), controlPoint2: CGPoint(x: -0.35, y: 16.64))
        bezierPath.addCurve(to: CGPoint(x: 0.26, y: 17.07), controlPoint1: CGPoint(x: -0.13, y: 16.96), controlPoint2: CGPoint(x: 0.09, y: 17.07))
        bezierPath.addLine(to: CGPoint(x: 5.89, y: 17.07))
        bezierPath.addLine(to: CGPoint(x: -0.24, y: 31.31))
        bezierPath.addCurve(to: CGPoint(x: -0.02, y: 31.95), controlPoint1: CGPoint(x: -0.35, y: 31.52), controlPoint2: CGPoint(x: -0.24, y: 31.79))
        bezierPath.addCurve(to: CGPoint(x: 0.26, y: 32), controlPoint1: CGPoint(x: 0.04, y: 32), controlPoint2: CGPoint(x: 0.15, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 0.69, y: 31.84), controlPoint1: CGPoint(x: 0.42, y: 32), controlPoint2: CGPoint(x: 0.58, y: 31.95))
        bezierPath.addLine(to: CGPoint(x: 18.2, y: 11.57))
        bezierPath.addCurve(to: CGPoint(x: 18.26, y: 10.99), controlPoint1: CGPoint(x: 18.31, y: 11.41), controlPoint2: CGPoint(x: 18.37, y: 11.2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 2.17, y: 28.43))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 16.69))
        bezierPath.addCurve(to: CGPoint(x: 7.15, y: 16.21), controlPoint1: CGPoint(x: 7.26, y: 16.53), controlPoint2: CGPoint(x: 7.26, y: 16.37))
        bezierPath.addCurve(to: CGPoint(x: 6.71, y: 16), controlPoint1: CGPoint(x: 7.04, y: 16.11), controlPoint2: CGPoint(x: 6.88, y: 16))
        bezierPath.addLine(to: CGPoint(x: 1.13, y: 16))
        bezierPath.addLine(to: CGPoint(x: 8.79, y: 1.07))
        bezierPath.addLine(to: CGPoint(x: 16.23, y: 1.07))
        bezierPath.addLine(to: CGPoint(x: 9.78, y: 10.93))
        bezierPath.addCurve(to: CGPoint(x: 9.78, y: 11.47), controlPoint1: CGPoint(x: 9.67, y: 11.09), controlPoint2: CGPoint(x: 9.67, y: 11.31))
        bezierPath.addCurve(to: CGPoint(x: 10.27, y: 11.73), controlPoint1: CGPoint(x: 9.89, y: 11.63), controlPoint2: CGPoint(x: 10.05, y: 11.73))
        bezierPath.addLine(to: CGPoint(x: 16.62, y: 11.73))
        bezierPath.addLine(to: CGPoint(x: 2.17, y: 28.43))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()






        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
        
        context.restoreGState()

    }

    public dynamic class func drawBolt(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 17, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 17, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 17, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.79, y: 8.42))
        bezierPath.addCurve(to: CGPoint(x: 16.92, y: 9.27), controlPoint1: CGPoint(x: 17.02, y: 8.68), controlPoint2: CGPoint(x: 17.06, y: 8.96))
        bezierPath.addLine(to: CGPoint(x: 6.63, y: 31.52))
        bezierPath.addCurve(to: CGPoint(x: 5.82, y: 32), controlPoint1: CGPoint(x: 6.46, y: 31.84), controlPoint2: CGPoint(x: 6.19, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 5.56, y: 31.96), controlPoint1: CGPoint(x: 5.77, y: 32), controlPoint2: CGPoint(x: 5.68, y: 31.99))
        bezierPath.addCurve(to: CGPoint(x: 5.07, y: 31.6), controlPoint1: CGPoint(x: 5.34, y: 31.9), controlPoint2: CGPoint(x: 5.18, y: 31.78))
        bezierPath.addCurve(to: CGPoint(x: 4.99, y: 31.02), controlPoint1: CGPoint(x: 4.96, y: 31.42), controlPoint2: CGPoint(x: 4.96, y: 31.42))
        bezierPath.addLine(to: CGPoint(x: 8.74, y: 15.48))
        bezierPath.addLine(to: CGPoint(x: 1, y: 17.42))
        bezierPath.addCurve(to: CGPoint(x: 0.77, y: 17.44), controlPoint1: CGPoint(x: 0.95, y: 17.44), controlPoint2: CGPoint(x: 0.87, y: 17.44))
        bezierPath.addCurve(to: CGPoint(x: 0.18, y: 17.23), controlPoint1: CGPoint(x: 0.54, y: 17.44), controlPoint2: CGPoint(x: 0.35, y: 17.37))
        bezierPath.addCurve(to: CGPoint(x: -0.07, y: 16.48), controlPoint1: CGPoint(x: -0.05, y: 17.04), controlPoint2: CGPoint(x: -0.13, y: 16.79))
        bezierPath.addLine(to: CGPoint(x: 3.77, y: 0.62))
        bezierPath.addCurve(to: CGPoint(x: 4.07, y: 0.17), controlPoint1: CGPoint(x: 3.82, y: 0.44), controlPoint2: CGPoint(x: 3.92, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 4.6, y: 0), controlPoint1: CGPoint(x: 4.22, y: 0.06), controlPoint2: CGPoint(x: 4.22, y: 0.06))
        bezierPath.addLine(to: CGPoint(x: 10.86, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 11.47, y: 0.24), controlPoint1: CGPoint(x: 11.1, y: 0), controlPoint2: CGPoint(x: 11.3, y: 0.08))
        bezierPath.addCurve(to: CGPoint(x: 11.72, y: 0.81), controlPoint1: CGPoint(x: 11.63, y: 0.4), controlPoint2: CGPoint(x: 11.63, y: 0.4))
        bezierPath.addCurve(to: CGPoint(x: 11.62, y: 1.15), controlPoint1: CGPoint(x: 11.72, y: 0.91), controlPoint2: CGPoint(x: 11.68, y: 1.03))
        bezierPath.addLine(to: CGPoint(x: 8.36, y: 10.06))
        bezierPath.addLine(to: CGPoint(x: 15.91, y: 8.17))
        bezierPath.addCurve(to: CGPoint(x: 16.14, y: 8.13), controlPoint1: CGPoint(x: 16.01, y: 8.15), controlPoint2: CGPoint(x: 16.09, y: 8.13))
        bezierPath.addCurve(to: CGPoint(x: 16.79, y: 8.42), controlPoint1: CGPoint(x: 16.38, y: 8.13), controlPoint2: CGPoint(x: 16.6, y: 8.23))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfChevronRight: UIImage {
        if Cache.imageOfChevronRight != nil {
            return Cache.imageOfChevronRight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 16), false, 0)
            StyleKitName.drawChevronRight()

        Cache.imageOfChevronRight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfChevronRight!
    }

    public dynamic class var imageOfCancel: UIImage {
        if Cache.imageOfCancel != nil {
            return Cache.imageOfCancel!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 14), false, 0)
            StyleKitName.drawCancel()

        Cache.imageOfCancel = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancel!
    }

    public dynamic class var imageOfFlash: UIImage {
        if Cache.imageOfFlash != nil {
            return Cache.imageOfFlash!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 32), false, 0)
            StyleKitName.drawFlash()

        Cache.imageOfFlash = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfFlash!
    }

    public dynamic class var imageOfBolt: UIImage {
        if Cache.imageOfBolt != nil {
            return Cache.imageOfBolt!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 17, height: 32), false, 0)
            StyleKitName.drawBolt()

        Cache.imageOfBolt = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfBolt!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var chevronRightTargets: [AnyObject]! {
        get { return Cache.chevronRightTargets }
        set {
            Cache.chevronRightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfChevronRight)
            }
        }
    }

    @IBOutlet dynamic var cancelTargets: [AnyObject]! {
        get { return Cache.cancelTargets }
        set {
            Cache.cancelTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfCancel)
            }
        }
    }

    @IBOutlet dynamic var flashTargets: [AnyObject]! {
        get { return Cache.flashTargets }
        set {
            Cache.flashTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfFlash)
            }
        }
    }

    @IBOutlet dynamic var boltTargets: [AnyObject]! {
        get { return Cache.boltTargets }
        set {
            Cache.boltTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfBolt)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
